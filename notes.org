#+PROPERTY: header-args:scheme :tangle "gwl-gladiator.scm"
#+PROPERTY: header-args:nextflow :tangle "gladiator.nf" 
#+PROPERTY: header-args:dot :output-dir img :file-ext svg
#+TODO: TODO(t) | DONE(d)
#+LINK: gladiator file:../glaDIAtor/%s
* Analysis [0/5]
** Headers
#+begin_src emacs-lisp :tangle no
(setq org-babel-tangle-lang-exts
      (cl-remove-duplicates 
      (append
       '(("scheme" . "scm"))
       org-babel-tangle-lang-exts
       )
      :test 'equal))
#+end_src

#+RESULTS:
: ((scheme . scm) (python . py) (D . d) (C++ . cpp) (emacs-lisp . el) (elisp . el))


#+NAME: gwl-header-block
#+begin_src scheme :noweb yes
(define-module (workflow)
  #:use-module (gwl workflows)
  #:use-module (gwl processes)
  #:use-module (gwl utils)
  #:use-module (gwl sugar))

<<gwl-vars>>
#+end_src

#+NAME: nf-header-block
#+begin_src nextflow :noweb yes 
<<nf-vars>>
#+end_src
** TODO building database
*Overview*
[[file:glaDIAtor/workflow.py::def build_database(\\][build_database definition]]
#+NAME: dot-build-database
#+begin_src dot 
digraph {
	cat[shape=box,label="Cat with Bio.SeqIo"]
	DecoyDatabase[shape=box, ]
	DB_fasta[style=bold,label="DB.fasta"]
	DB_with_decoy[style=bold,label="DB_with_decoys.fasta"]
	all_fasta_files -> cat [label="cannot be parallized"]
	cat -> DB_fasta -> DecoyDatabase -> DB_with_decoy
}
#+end_src

#+RESULTS: dot-build-database
[[file:img/dot-build-database.svg]]


*** Combining Fasta Files
#+NAME: py-joinfastafiles
#+begin_src python :tangle no
from Bio import SeqIO
def join_fasta_files(input_files, output_file):
    IDs = set()
    seqRecords = []
    for filename in input_files:
        records = SeqIO.index(filename, "fasta")
        for ID in records:
            if ID not in IDs:
                seqRecords.append(records[ID])
                IDs.add(ID)
            else:
                print("Found duplicated sequence ID " + str(ID) + ", skipping this sequence from file " + filename)

    SeqIO.write(seqRecords, output_file, "fasta")
#+end_src

#+NAME: nf-joinfastafiles
#+begin_src nextflow :noweb yes
process JoinFastaFiles {
    input:
    file fasta_files from fasta_files_ch.collect()
    output:
    file 'joined_database.fasta' into joined_fasta_database_ch

    """
    #!/usr/bin/env python3
    <<py-joinfastafiles>>
    join_fasta_files("$fasta_files".split(" "), 'joined_database.fasta')
    """
}
#+end_src

#+begin_src nextflow :noweb-ref nf-vars :tangle no
params.fastafiles='fasta/*.fasta'
Channel.fromPath(params.fastafiles).set({fasta_files_ch})
#+end_src

#+NAME: gwl-joinfastafiles-deps
#+begin_src scheme :noweb-ref deps :tangle no
("join-fasta-files"
 "python"
 "biopython")
#+end_src

#+NAME: gwl-joinfastafiles
#+begin_src scheme :noweb yes
(define (join-fasta-files fasta-files)
  (make-process
   (name "join-fasta-files")
   (synopsis "Join fasta files into one file")
   (packages
    (cdr (quote
      <<gwl-joinfastafiles-deps>>)))
   (inputs (files fasta-files))
   (outputs "joined-fasta.fasta")
   # python
{
<<py-joinfastafiles>>
join_fasta_files({{inputs}}.split(" "),{{outputs}})
}))
#+end_src

#+begin_src scheme :noweb-ref gwl-vars :tangle no
(define fasta-files
  '("Q7M135.fasta" "trypsin.fasta"))
#+end_src

#+begin_src scheme :noweb-ref gwl-proc :tangle no
(join-fasta-files fasta-files)
#+end_src
*** Adding Decoys
#+NAME: nf-buildfastadatabase
#+begin_src nextflow
fasta_db_with_decoys = Channel.value()
process BuildFastaDatabase {
    input:
    file joined_fasta_db from joined_fasta_database_ch
    output:
    file "DB_with_decoys.fasta" into joined_fasta_with_decoys_ch
    """
    DecoyDatabase -in $joined_fasta_db -out DB_with_decoys.fasta
    """
}
#+end_src
=DecoyDatabase= package is from =OpenMs/utils=
https://abibuilder.informatik.uni-tuebingen.de/archive/openms/Documentation/release/latest/html/UTILS_DecoyDatabase.html
https://github.com/OpenMS/OpenMS.git
License: BSD-3 clause
(Not in guix, but uses cmake as build-program,
should be relatively easy to define)
#+NAME: gwl-buildfastadatabase
#+begin_src scheme 
(define create-database-with-decoys
  (make-process
   (name "create-database-with-database")
   (synopsis "Add decoys to fasta database")
   (inputs "joined-fasta.fasta")
   (outputs "DB-with-decoys.fasta")
   (packages )
   # sh
     {
      DecoyDatabase -in $inputs -out $outputs
		    })))
#+end_src

#+begin_src scheme :noweb-ref gwl-proc :tangle no
create-database-with-decoys
#+end_src
** TODO Creating Pseudospectra
[[file:glaDIAtor/workflow.py::def runDiaumpire]]
#+NAME: dot-create-pseudospectra
#+begin_src dot :file-ext svg
digraph {
    DIA[label="DIA_1.mzXML"]
    diaumpire[shape="box",label="java -jar DiaUmpire.jar"]
    pseudo_spectra[label="libfree/DIA_1.mgs"]
    diaumpire_cfg[label="diaumpirecfg.txt (singleton)"]
    pseudo_spectra_mzxml[label="libfree-pseudospectra/DIA_1.mzXML"]
		   
    DIA -> diaumpire
    diaumpire_cfg -> diaumpire
    diaumpire -> pseudo_spectra -> { msconvert[shape="box"] } -> pseudo_spectra_mzxml
}
#+end_src

#+RESULTS: dot-create-pseudospectra
[[file:img/dot-create-pseudospectra.svg]]
https://github.com/Nesvilab/DIA-Umpire/tree/master

DIAumpire is =Apache 2= licensed.
#+NAME: diaumpireconfig
#+begin_src conf :eval no :tangle diaumpireconfig.txt 
#Number of threads
# set to the number of cores available
# In the original gladiator, this was set by replicing this all caps 
Thread = 4

#Precursor-fragments grouping parameters
RPmax = 25
RFmax = 300
CorrThreshold = 0.2
DeltaApex = 0.6
RTOverlap = 0.3

#Fragment intensity adjustments
# change BoostComplementaryIon if later using database search results to build libraries for Skyline/OpenSWATH
AdjustFragIntensity = true
BoostComplementaryIon = true

#Export detected MS1 features (output feature file can be loaded and mapped to RAW data in BatMass)
ExportPrecursorPeak = false

#Signal extraction: mass accuracy and resolution
# resolution parameter matters only for data generated in profile mode
SE.MS1PPM = 15
SE.MS2PPM = 25
SE.Resolution = 60000

#Signal extraction: signal to noise filter
SE.SN = 1.1
SE.MS2SN = 1.1

#Signal extraction: minimum signal intensity filter
# for Thermo data, filtering is usually not necessary. Set SE.EstimateBG to false and SE.MinMSIntensity and SE.MinMSMSIntensity to a low value, e.g. 1
# for older Q Exactive data, or when too many MS1 features are extracted, set SE.EstimateBG to yes (or apply SE.MinMSIntensity and SE.MinMSMSIntensity values based on BatMass visualization)
SE.EstimateBG = false
SE.MinMSIntensity = 1
SE.MinMSMSIntensity = 1

#Signal extraction: peak curve detection and isotope grouping
# for older Q Exactive data, or when too many MS1 features are extracted, set SE.NoMissedScan to 1
SE.NoMissedScan = 2
SE.MaxCurveRTRange = 2
SE.RemoveGroupedPeaks = true
SE.RemoveGroupedPeaksRTOverlap = 0.3
SE.RemoveGroupedPeaksCorr = 0.3
SE.MinNoPeakCluster = 2
SE.MaxNoPeakCluster = 4

#Signal extraction: filtering of MS1 features 
# if interested in modified peptides, increase MassDefectOffset parameter, or set SE.MassDefectFilter to false
SE.IsoPattern = 0.3
SE.MassDefectFilter = true
SE.MassDefectOffset = 0.1

#Signal extraction: other 
SE.StartCharge = 1
SE.EndCharge = 5
SE.MS2StartCharge = 2
SE.MS2EndCharge = 5
SE.MinFrag=10
SE.StartRT = 0
SE.EndRT = 9999
SE.MinMZ = 200
SE.MinPrecursorMass = 600
SE.MaxPrecursorMass = 5000


#Isolation window setting
#The current version supports the following window type: SWATH (fixed window size), V_SWATH (variable SWATH window), MSX, MSE, pSMART
WindowType=SWATH

#Fix window size (For SWATH)
# for Thermo data, this will be determined from raw data automatically
#WindowSize=15

#Variable SWATH window setting (start m/z, end m/z, separated by Tab)
# for Thermo data, this will be determined from raw data automatically

#==window setting begin
#==window setting end
#+end_src
MGF = Mascot Generic Format
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3518119/
#+begin_src nextflow
process GeneratePseudoSpectra  {
    input:
    file diafile from dia_mzml_files_for_pseudospectra_ch
    path diaumpireconfig from diaumpireconfig_ch.first()
        
    output:
    file "*.mgf" into pseudospectra_mgf_ch

    """
    java -jar /opt/dia-umpire/DIA_Umpire_SE.jar $diafile $diaumpireconfig
    """
}

process MgsToMzxml {
    input:
    file mgf from pseudospectra_mgf_ch
    output:
    file "*.mzXML" into pseudospectra_ch
    
    """
    msconvert $mgf --mzXML 
    """
}
#+end_src 
#+begin_src scheme :noweb-ref deps :tangle no 
("generate-pseudo-spectra"
 "dia-umpire" 
 "pwiz") ;; the free one 
#+end_src


though this  might also be done with openms's =FileConverter= ? which is more conventionally build 
https://abibuilder.informatik.uni-tuebingen.de/archive/openms/Documentation/release/latest/html/TOPP_FileConverter.html
mstools
#+begin_src nextflow :noweb-ref nf-vars :tangle no
params.diaumpireconfig='diaumpireconfig.txt'
params.diafiles = "DIA/*.mzML"
params.ddafiles = "DDA/*.mzXML"
// so that this is a singleton channel
diaumpireconfig_ch = Channel.fromPath(params.diaumpireconfig)
Channel.fromPath(params.ddafiles).into{dda_files_ch ; dda_files_empty_check}
// dda_assisted_p = dda_files_empty_check.ifEmpty('Empty').first() != 'Empty'
dda_assisted_p = false

(dia_mzml_files_ch, dia_mzml_files_for_pseudospectra_ch) =
  (dda_assisted_p ?
    [ Channel.fromPath(params.diafiles), Channel.empty() ] :
    Channel.fromPath(params.diafiles).into(2))

#+end_src 
As dia will be listened to by two in the case of not dda-assisted,
we'll have to use the [[https://www.nextflow.io/docs/latest/operator.html#operator-into][=into=]] operator to input into two channels if we dont have =dda=  data

** TODO Creating Swath window files
:PROPERTIES:
:ID:       1469cbd6-2fe8-4919-8808-85f17dfee228
:END:
[[file:glaDIAtor/workflow.py::def create_swath_window_files]]
outputs files ~swath-windows.txt~,
~truncated-swath-windows.txt~

** TODO Creating interactome [0/4]
*** TODO Comet 
:LOGBOOK:
- State "TODO"       from              [2022-06-06 Mon 09:56]
:END:
file:glaDIAtor/UI/ui/__init__.py::workflow.runComet
[[file:glaDIAtor/workflow.py::def runComet]]
*** TODO Xtandem
:LOGBOOK:
- State "TODO"       from              [2022-06-06 Mon 09:56]
:END:
[[file:glaDIAtor/UI/ui/__init__.py::workflow.runXTandem]]
[[file:glaDIAtor/workflow.py::def runXTandem]]

*** TODO Joining Comet & Xtandem
[[file:glaDIAtor/workflow.py::combine_search_engine_results(event,]]
[[file:glaDIAtor/workflow.py::def combine_search_engine_results]]
*** TODO Building Specral Library

[[file:glaDIAtor/UI/ui/__init__.py::workflow.buildlib(]]
Inputs from [[*Creating Swath window files][Creating Swath window files]]

http://www.openswath.org/en/latest/docs/openswath.html

** TODO Building Dia Matrix

* Putting it together
** gwl
#+begin_src scheme :noweb yes
(make-workflow
 (name "my-workflow")
 (processes
  (auto-connect
   (list
    <<gwl-proc>>
    ))))
#+end_src
** nf
#+begin_src nextflow :tangle nextflow.config
singularity.autoMounts = true
process.container="file://../gladiator/gladiator-images/gladiatorserver.simg"
singularity.enabled = true
#+end_src

* File local variables
For this file

# Local Variables:
# compile-command: "cd /data/epouta1/B22003_Elixir_DIA_Nextflow/playground/ && module use /appl/user/modulefiles/ && module load nextflow && salloc nextflow run gladiator.nf"
# End:

For the scheme file

#+begin_src scheme
;; Local Variables;
;; compile-command: "guix shell guix guile gwl --with-git-url=gwl=git://git.savannah.gnu.org/gwl.git --with-commit=gwl=e233be5cf0e2f9cb37e3daa299f5031bea56ba71 -- guix workflow run -v10 gwl-gladiator.scm
;; End:
#+end_src
For the nextflow file
#+begin_src nextflow
// Local Variables:
// compile-command: "module use /appl/user/modulefiles/ && module load nextflow && salloc nextflow run gladiator.nf"
// End:
#+end_src


* Note
:LOGBOOK:
- State "TODO"       from              [2022-06-03 Fri 15:52]
:END:
Pyprophet calling convention altered after v2.1.0,
check what changed
so can't literally copy invocation from =workflow.py=.
(S. said)
* COMMENT for editing
To make the file links work,
=git clone= gladiator here.
(Maybe i'll put gladiator as a git submodule?)

#+begin_src emacs-lisp :tangle no :results none
(defun set-local-abbrevs (abbrevs)
  "Add ABBREVS to `local-abbrev-table' and make it buffer local.
ABBREVS should be a list of abbrevs as passed to `define-abbrev-table'.
The `local-abbrev-table' will be replaced by a copy with the new abbrevs added,
so that it is not the same as the abbrev table used in other buffers with the
same `major-mode'."
  (let* ((bufname (buffer-name))
         (prefix (substring (md5 bufname) 0 (length bufname)))
         (tblsym (intern (concat prefix "-abbrev-table"))))
    (set tblsym (copy-abbrev-table local-abbrev-table))
    (dolist (abbrev abbrevs)
      (define-abbrev (eval tblsym)
        (cl-first abbrev)
        (cl-second abbrev)
        (cl-third abbrev)))
    (setq-local local-abbrev-table (eval tblsym))))
(set-local-abbrevs '(
		     ("nfv" ;;variables
		      "#+begin_src nextflow :noweb-ref nf-vars :tangle no\n\n#+end_src"
		      previous-line)
		     ("nfp" ;; params file
		      "#+begin_src nextflow :noweb-ref nf-params :tangle no\n\n#+end_src"
		      

		     ("gwv" ;; variables
		      "#+begin_src scheme :noweb-ref gwl-vars :tangle no\n\n#+end_src"
		      previous-line)
		     ("gwp" ;; processes to be autoconnected
		      "#+begin_src scheme :noweb-ref gwl-proc :tangle no\n\n#+end_src"
		      previous-line)
		     ("wfd"
		      "#+begin_src scheme :noweb-ref deps :tangle no \n\n#+end_src"
		      previous-line)))
#+end_src


#+begin_src emacs-lisp
(defun gladiator-compile-test ()
  (interactive)
  (let ((default-directory (concat (file-remote-p default-directory)
				   "/data/epouta1/B22003_Elixir_DIA_Nextflow/playground/"))
	;; dont ask about saving things
	(compilation-save-buffers-predicate 'ignore))
    (compile "module use /appl/user/modulefiles/ && module load nextflow && salloc nextflow run gladiator.nf")))
;; -process.container='file://../gladiator/gladiator.simg' -with-singularity -main-script gladiator
(defun gladiator-tangle-and-compile ()
  (interactive)
  (call-interactively 'org-babel-tangle)
  (gladiator-compile-test))

(use-local-map (copy-keymap org-mode-map))
(local-set-key (kbd "C-c m") 'gladiator-tangle-and-compile)
#+end_src

#+RESULTS:
: gladiator-tangle-and-compile





